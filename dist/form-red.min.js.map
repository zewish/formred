{"version":3,"file":"form-red.min.js","sources":["../src/actions.js","../node_modules/oget/src/oget.js","../node_modules/o.set/src/oset.js","../src/omit.js","../src/validate.js","../src/make-value.js","../src/reducer.js","../src/connect-to-form.js","../src/form.js","../src/field.js","../src/index.js"],"sourcesContent":["export const PREFIX = '@@formRed'\n\nexport const CREATE = `${PREFIX}_CREATE`;\nexport const DESTROY = `${PREFIX}_DESTROY`;\n\nexport const ADD = `${PREFIX}_ADD`;\nexport const REMOVE = `${PREFIX}_REMOVE`;\n\nexport const SET = `${PREFIX}_SET`;\nexport const SET_ALL = `${PREFIX}_SET_ALL`;\n\nexport const TOUCH = `${PREFIX}_TOUCH`;\nexport const UNTOUCH = `${PREFIX}_UNTOUCH`;\nexport const TOUCH_ALL = `${PREFIX}_TOUCH_ALL`;\nexport const UNTOUCH_ALL = `${PREFIX}_UNTOUCH_ALL`;\n\nexport const SUBMIT = `${PREFIX}_SUBMIT`;\nexport const SUBMIT_END = `${PREFIX}_SUBMIT_END`;\n\nexport const FORM_ERROR = `${PREFIX}_FORM_ERROR`;\nexport const FIELD_ERROR = `${PREFIX}_FIELD_ERROR`;\n\nexport const RESET = `${PREFIX}_RESET`;\n\nexport const create = (formName, opts) => ({\n    type: CREATE\n    , payload: {\n        formName\n        , opts\n    }\n});\n\nexport const destroy = formName => ({\n    type: DESTROY\n    , payload: { formName }\n});\n\nexport const add = (formName, fieldName, fieldValue, fieldType = 'text') => ({\n    type: ADD\n    , payload: {\n        formName\n        , fieldName\n        , fieldValue\n        , fieldType\n    }\n});\n\nexport const remove = (formName, fieldName) => ({\n    type: REMOVE\n    , payload: {\n        formName\n        , fieldName\n    }\n});\n\nexport const set = (formName, fieldName, fieldValue) => ({\n    type: SET\n    , payload: {\n        formName\n        , fieldName\n        , fieldValue\n    }\n});\n\nexport const setAll = (formName, values) => ({\n    type: SET_ALL\n    , payload: {\n        formName\n        , values\n    }\n});\n\nexport const touch = (formName, fieldName) => ({\n    type: TOUCH\n    , payload: {\n        formName\n        , fieldName\n    }\n});\n\nexport const untouch = (formName, fieldName) => ({\n    type: UNTOUCH\n    , payload: {\n        formName\n        , fieldName\n    }\n});\n\nexport const touchAll = (formName) => ({\n    type: TOUCH_ALL\n    , payload: { formName }\n});\n\nexport const untouchAll = (formName) => ({\n    type: UNTOUCH_ALL\n    , payload: { formName }\n});\n\nexport const submit = formName => ({\n    type: SUBMIT\n    , payload: { formName }\n});\n\nexport const submitEnd = (formName, formError = null, fieldErrors = null) => ({\n    type: SUBMIT_END\n    , payload: {\n        formName\n        , formError\n        , fieldErrors\n    }\n});\n\nexport const reset = (formName, full = true) => ({\n    type: RESET\n    , payload: {\n        formName\n        , full\n    }\n});\n\nexport const formError = (formName, error = null) => ({\n    type: FORM_ERROR\n    , payload: {\n        formName\n        , error\n    }\n});\n\nexport const fieldError = (formName, fieldName, error = null) => ({\n    type: FIELD_ERROR\n    , payload: {\n        formName\n        , fieldName\n        , error\n    }\n});","'use strict';\n\nexport default (obj, path, def) => {\n    let res = path\n    .replace(/\\[/g, '.')\n    .replace(/\\]/g, '')\n    .replace(/^\\./, '')\n    .split('.')\n    .reduce((prev, curr) => {\n        return prev && prev[curr]\n    }, obj);\n\n    return (res === undefined)\n      ? def\n      : res;\n}","'use strict';\n\nexport default (obj, path, value) => {\n    let parts = path\n    .replace(/\\[/g, '.')\n    .replace(/\\]/g, '')\n    .replace(/^\\./, '')\n    .split('.');\n\n    parts.reduce((prev, curr, i) => {\n        if (!(typeof prev[curr] == 'object')) {\n            prev[curr] = {};\n        }\n\n        if (parts.length === i + 1) {\n            prev[curr] = value;\n        }\n\n        return prev[curr];\n    }, obj || {});\n\n    return obj;\n}","export default (obj, keys = []) => {\n    const omitted = [].concat(keys)\n    .reduce((dest, key) => {\n        dest[key] = true;\n        return dest;\n    }, {});\n\n    return Object.keys(obj || {})\n    .reduce((dest, key) => {\n        if (!omitted[key]) {\n            dest[key] = obj[key];\n        }\n\n        return dest;\n    }, {});\n};","import get from 'oget';\nimport set from 'o.set';\n\nexport default (form) => {\n    const { fields, values, opts } = form;\n    const errors = form.opts.validate(values, opts);\n\n    if (!(typeof errors == 'object')) {\n        return form;\n    }\n\n    form.errors = null;\n\n    Object.keys(fields)\n    .forEach(fieldName => {\n        const error = get(\n            errors, fieldName, errors[fieldName] || null\n        );\n\n        if (error) {\n            form.errors = form.errors || {};\n            set(form.errors, fieldName, error);\n        }\n\n        form.fields[fieldName] = {\n            ...(fields[fieldName] || {})\n            , error\n        };\n    });\n\n    return form;\n};","import get from 'oget';\n\nexport const empty = (fieldType) => {\n    if (fieldType == 'checkbox' || fieldType == 'radio') {\n        return false;\n    }\n\n    return '';\n}\n\nexport const fromEvent = (ev) => {\n    if (!ev || !ev.stopPropagation || !ev.preventDefault) {\n        return ev;\n    }\n\n    switch (ev.target.type) {\n        case 'radio':\n        case 'checkbox':\n            return ev.target.checked;\n        case 'file':\n            return ev.target.files || get(ev, 'dataTransfer.files');\n    }\n\n    return ev.target.value;\n};","import get from 'oget';\nimport set from 'o.set';\nimport omit from './omit';\nimport validate from './validate';\nimport { empty } from './make-value';\n\nimport {\n    CREATE\n    , DESTROY\n\n    , ADD\n    , REMOVE\n\n    , SET\n    , SET_ALL\n\n    , TOUCH\n    , UNTOUCH\n    , TOUCH_ALL\n    , UNTOUCH_ALL\n\n    , SUBMIT\n    , SUBMIT_END\n    , RESET\n\n    , FORM_ERROR\n    , FIELD_ERROR\n} from './actions';\n\nconst emptyField = {\n    touched: false\n    , error: null\n    , type: 'text'\n};\n\nconst parseValues = (fields, values = {}, omitFieldName) => Object\n.keys(fields)\n.reduce((obj, fieldName) => {\n    if (fieldName === omitFieldName) {\n        return obj;\n    }\n\n    set(obj, fieldName\n        , get(values, fieldName) || empty(\n            fields[fieldName].type\n        )\n    );\n\n    return obj;\n}, {});\n\nexport default (state = {}, { type, payload }) => {\n    const formName = get(payload, 'formName')\n        , fieldName = get(payload, 'fieldName');\n\n    let form = get(state, `${formName || ''}`, {\n        opts: {}\n        , fields: {}\n        , values: {}\n        , submitting: false\n        , errors: null\n        , error: null\n    });\n\n    let fields = get(form, 'fields', {})\n        , values = get(form, 'values', {});\n\n    switch (type) {\n        case CREATE:\n            const opts = get(payload, 'opts', {});\n\n            return {\n                ...state\n                , [formName]: state[formName] || {\n                    ...form\n                    , values: opts.values\n                      ? parseValues(fields, opts.values)\n                      : {}\n                    , opts\n                }\n            };\n\n        case DESTROY:\n            return {\n                ...omit(state, formName)\n            };\n\n        case ADD:\n            if (get(values, fieldName) === undefined) {\n                set(form.values, `${fieldName}`, payload.fieldValue);\n            }\n\n            form.fields = {\n                ...fields\n                , [fieldName]: fields[fieldName] || {\n                    ...emptyField\n                    , type: payload.fieldType\n                }\n            };\n\n            return {\n                ...state\n                , [formName]: {\n                    ...validate(form)\n                }\n            };\n\n        case REMOVE:\n            form.fields = omit(fields, fieldName);\n            form.values = parseValues(fields, values, fieldName);\n\n            return {\n                ...state\n                , [formName]: {\n                    ...validate(form)\n                }\n            };\n\n        case SET:\n            set(form.values, `${fieldName}`, payload.fieldValue);\n\n            return {\n                ...state\n                , [formName]: {\n                    ...validate(form)\n                }\n            };\n\n        case SET_ALL:\n            values = parseValues(fields, payload.values);\n\n            return {\n                ...state\n                , [formName]: {\n                    ...validate({\n                        ...form\n                        , values\n                        , opts: {\n                            ...(form.opts || {})\n                            , values\n                        }\n                    })\n                }\n            };\n\n        case TOUCH:\n        case UNTOUCH:\n            if (!fields[fieldName]) {\n                return state;\n            }\n\n            const field = fields[fieldName];\n            field.touched = type == TOUCH;\n\n            return {\n                ...state\n                , [formName]: {\n                    ...form\n                    , fields: {\n                        ...fields\n                        , [fieldName]: field\n                    }\n                }\n            };\n\n        case TOUCH_ALL:\n        case UNTOUCH_ALL:\n            fields = Object.keys(fields).reduce((obj, name) => {\n                obj[name] = {\n                    ...obj[name]\n                    , touched: type == TOUCH_ALL\n                };\n\n                return obj;\n            }, fields);\n\n            return {\n                ...state\n                , [formName]: {\n                    ...form\n                    , fields\n                }\n            };\n\n        case SUBMIT:\n            return {\n                ...state\n                , [formName]: {\n                    ...form\n                    , submitting: true\n                }\n            };\n\n        case SUBMIT_END:\n            const { fieldErrors } = payload;\n\n            if (fieldErrors) {\n                fields = Object.keys(fields).reduce((obj, fieldName) => {\n                    const error = get(fieldErrors, fieldName);\n\n                    if (!error) {\n                        return obj;\n                    }\n\n                    obj[fieldName].error = error;\n\n                    form.errors = form.errors || {};\n                    set(form, `errors.${fieldName}`, payload.error);\n\n                    return obj;\n                }, fields);\n\n                form = {\n                    ...form, fields\n                };\n            }\n\n            return {\n                ...state\n                , [formName]: {\n                    ...form\n                    , submitting: false\n                    , error: payload.formError\n                }\n            };\n\n        case RESET:\n            fields = Object.keys(fields).reduce((obj, field) => {\n                obj[field] = {\n                    ...emptyField\n                    , type: fields[field].type\n                };\n\n                return obj;\n            }, {});\n\n            values = form.opts.values;\n\n            if (payload.full) {\n                values = Object.keys(fields).reduce((obj, field) => {\n                    set(\n                        obj\n                        , field\n                        , empty(fields[field].type)\n                    );\n\n                    return obj;\n                }, {});\n            }\n\n            return {\n                ...state\n                , [formName]: validate({\n                    ...form\n                    , fields\n                    , values\n                    , submitting: false\n                    , error: null\n                })\n            };\n\n        case FORM_ERROR:\n            return {\n                ...state\n                , [formName]: {\n                    ...form\n                    , error: payload.error\n                }\n            };\n\n        case FIELD_ERROR:\n            if (!fields[fieldName]) {\n                return state;\n            }\n\n            form.fields[fieldName].error = payload.error;\n            form.errors = form.errors || {};\n\n            set(form, `errors.${fieldName}`, payload.error);\n\n            return {\n                ...state\n                , [formName]: { ...form }\n            };\n    }\n\n    return state;\n};","import { connect } from 'react-redux';\nimport get from 'oget';\n\nimport {\n    create\n    , destroy\n\n    , add\n    , remove\n\n    , set\n    , setAll\n\n    , touch\n    , untouch\n    , touchAll\n    , untouchAll\n\n    , reset\n    , formError\n    , fieldError\n\n    , submit\n    , submitEnd\n} from './actions';\n\nexport default (formName, key = 'form') => connect(\n    ({ formRed }) => ({\n        [key]: get(formRed, `${formName}`, {\n            opts: {}\n            , fields: {}\n            , values: {}\n        })\n    })\n    , dispatch => ({\n        [`${key}Actions`]: {\n            formName\n            , dispatch\n\n            , create: (opts) => dispatch(\n                create(formName, opts)\n            )\n            , destroy: () => dispatch(\n                destroy(formName)\n            )\n\n            , add: (fieldName, fieldValue, fieldType) => dispatch(\n                add(formName, fieldName, fieldValue, fieldType)\n            )\n            , remove: fieldName => dispatch(\n                remove(formName, fieldName)\n            )\n\n            , set: (fieldName, fieldValue) => dispatch(\n                set(formName, fieldName, fieldValue)\n            )\n            , setAll: values => dispatch(\n                setAll(formName, values)\n            )\n\n            , touch: fieldName => dispatch(\n                touch(formName, fieldName)\n            )\n            , untouch: fieldName => dispatch(\n                untouch(formName, fieldName)\n            )\n            , touchAll: () => dispatch(\n                touchAll(formName)\n            )\n            , untouchAll: () => dispatch(\n                untouchAll(formName)\n            )\n\n            , reset: (full) => dispatch(\n                reset(formName, full)\n            )\n            , formError: err => dispatch(\n                formError(formName, err)\n            )\n            , fieldError: (fieldName, err) => dispatch(\n                fieldError(formName, fieldName, err)\n            )\n        }\n    })\n    , (stateProps, dispatchProps, ownProps) => {\n        const keyActions = `${key}Actions`\n            , formActions = dispatchProps[keyActions]\n            , form = stateProps[key];\n\n        const dispatch = formActions.dispatch;\n\n        formActions.submit = (ev, onSubmit) => {\n            if (ev && ev.preventDefault) {\n                ev.preventDefault();\n            }\n\n            let onSubmitFn = (typeof ev == 'function')\n              ? ev\n              : onSubmit;\n\n            onSubmitFn = onSubmitFn || form.opts.onSubmit;\n\n            if (!(typeof onSubmitFn == 'function')) {\n                throw Error('No onSubmit function given');\n            }\n\n            formActions.touchAll();\n            formActions.formError(null);\n\n            if (form.errors) {\n                return;\n            }\n\n            dispatch(submit(formName));\n            onSubmitFn(form.values, formActions);\n        };\n\n        formActions.submitEnd = (formError, fieldErrors) => {\n            dispatch(submitEnd(formName, formError, fieldErrors));\n\n            const {\n                onSubmitError\n                , onSubmitSuccess\n            } = form.opts;\n\n            if (formError || fieldErrors) {\n                return onSubmitError(formError, fieldErrors);\n            }\n\n            onSubmitSuccess();\n        };\n\n        return {\n            ...stateProps\n            , ...dispatchProps\n            , ...ownProps\n            , [keyActions]: formActions\n        };\n    }\n);","import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport get from 'oget';\n\nexport default\nclass Form extends Component {\n    static propTypes = {\n        opts: PropTypes.object.isRequired\n        , wrappedProps: PropTypes.object.isRequired\n    }\n\n    static childContextTypes = {\n        formActions: PropTypes.object\n        , form: PropTypes.object\n        , opts: PropTypes.object\n    }\n\n    getChildContext() {\n        const { formActions, form, opts } = this.props;\n        return { formActions, form, opts };\n    }\n\n    componentWillMount() {\n        const { formActions, opts } = this.props;\n        formActions.create(opts);\n    }\n\n    componentWillUnmount() {\n        const { formActions, opts } = this.props;\n\n        if (opts.autoDestroy) {\n            formActions.destroy();\n        }\n    }\n\n    valuesSet = false\n\n    componentWillReceiveProps({ wrappedProps, opts, formActions }) {\n        if (this.valuesSet) {\n            return;\n        }\n\n        const values = get(opts, 'values');\n\n        if (values) {\n            this.valuesSet = true;\n            formActions.setAll(values);\n        }\n    }\n\n    render() {\n        const {\n            Wrapped\n            , wrappedProps\n            , form\n            , formActions\n        } = this.props;\n\n        return (\n            <Wrapped\n              {...wrappedProps}\n              form={form}\n              formActions={formActions}\n            />\n        );\n    }\n};","import React, { Component, PropTypes } from 'react';\nimport connectToForm from './connect-to-form';\nimport { empty, fromEvent } from './make-value';\n\nimport omit from './omit';\nimport get from 'oget';\n\nexport default\nclass Field extends Component {\n    static propTypes = {\n        name: PropTypes.string.isRequired\n        , type: PropTypes.string.isRequired\n        , component: PropTypes.func.isRequired\n    }\n\n    static contextTypes = {\n        formActions: PropTypes.object\n        , form: PropTypes.object\n        , opts: PropTypes.object\n    }\n\n    constructor(props, context) {\n        super(props, context);\n        this.Wrapped = props.component;\n\n        if (!context.form || !context.formActions || !context.opts) {\n            throw Error('Field must be inside a formRed() decorated component');\n        }\n    }\n\n    componentWillReceiveProps(props) {\n        if (`${this.Wrapped}` !== `${props.component}`) {\n            this.Wrapped = props.component;\n        }\n    }\n\n    componentWillMount() {\n        const { name, type } = this.props;\n\n        const value = get(\n            this.context.opts.values || {}\n            , name\n            , empty(type)\n        );\n\n        this.context.formActions.add(name, value, type);\n    }\n\n    render() {\n        const { Wrapped } = this;\n        const { form, formActions, opts } = this.context;\n        const { name, type } = this.props;\n\n        const extra = get(form, 'fields', {})[name];\n\n        return (\n            <Wrapped\n              extra={{\n                  form\n                  , formActions\n                  , error: get(form, `errors[${name}])`)\n                  , ...extra\n              }}\n              field={{\n                  ...omit(this.props, 'component')\n                  , value: get(\n                      form\n                      , `values[${name}]`\n                      , empty(type)\n                  )\n              }}\n              handlers={{\n                  onChange: ev => formActions.set(\n                      name, fromEvent(ev)\n                  )\n                  , onFocus: () => !opts.touchOnBlur && formActions.touch(name)\n                  , onBlur: () => opts.touchOnBlur && formActions.touch(name)\n              }}\n            />\n        );\n    };\n};","import React from 'react';\nimport * as actions from './actions';\nimport reducer from './reducer';\nimport connectToForm from './connect-to-form';\nimport Form from './form';\nimport Field from './field';\n\nexport {\n    actions\n    , reducer\n    , connectToForm\n    , Field\n};\n\nexport const formRed = (\n    opts\n    , mapPropsToOpts = () => ({})\n) => Wrapped => {\n    if (!opts.name) {\n        throw Error('Form name required');\n    }\n\n    opts = {\n        autoDestroy: true\n        , touchOnBlur: true\n        , validate() {}\n        , onSubmitSuccess() {}\n        , onSubmitError(formError, fieldErrors) {}\n        , ...opts\n    };\n\n    let ConnectedForm = connectToForm(opts.name)(Form);\n    ConnectedForm.displayName = `formRed(${Wrapped.displayName || Wrapped.name || 'Component'})`;\n\n    return props => {\n        opts = {\n            ...opts\n            , ...mapPropsToOpts(props)\n        };\n\n        return (\n            <ConnectedForm\n              opts={opts}\n              Wrapped={Wrapped}\n              wrappedProps={props}\n            />\n        );\n    };\n};"],"names":["PREFIX","CREATE","DESTROY","ADD","REMOVE","SET","SET_ALL","TOUCH","UNTOUCH","TOUCH_ALL","UNTOUCH_ALL","SUBMIT","SUBMIT_END","FORM_ERROR","FIELD_ERROR","RESET","create","formName","opts","destroy","add","fieldName","fieldValue","fieldType","remove","set","setAll","values","touch","untouch","touchAll","untouchAll","submit","submitEnd","formError","fieldErrors","reset","full","error","fieldError","obj","path","def","res","replace","split","reduce","prev","curr","undefined","value","parts","i","length","keys","omitted","concat","dest","key","Object","form","fields","errors","validate","forEach","get","empty","fromEvent","ev","stopPropagation","preventDefault","target","type","checked","files","emptyField","parseValues","omitFieldName","state","payload","omit","field","touched","name","submitting","connect","formRed","dispatch","err","stateProps","dispatchProps","ownProps","keyActions","formActions","onSubmit","onSubmitFn","Error","onSubmitError","onSubmitSuccess","Form","valuesSet","this","props","autoDestroy","wrappedProps","Wrapped","React","Component","propTypes","PropTypes","object","isRequired","childContextTypes","Field","context","component","extra","touchOnBlur","string","func","contextTypes","mapPropsToOpts","ConnectedForm","connectToForm","displayName"],"mappings":"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"}